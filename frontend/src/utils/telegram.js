// frontend/src/utils/telegram.js - –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø: –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram
async function waitForTelegram(maxWait = 3000) {
  const start = Date.now();
  while (Date.now() - start < maxWait) {
    if (window.Telegram?.WebApp) {
      return true;
    }
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  return false;
}

export async function isTelegramWebApp() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram WebApp —Å—Ä–µ–¥—ã...');
  const telegramLoaded = await waitForTelegram(3000);

  if (!telegramLoaded) {
    console.error('‚ùå Telegram WebApp —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω');
    throw new Error('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∑–∞–ø—É—Å–∫–∞.');
  }

  const tg = window.Telegram.WebApp;
  console.log('‚úÖ Telegram WebApp –Ω–∞–π–¥–µ–Ω!', {
    version: tg.version,
    platform: tg.platform,
    hasUser: !!tg.initDataUnsafe?.user,
    hasInitData: !!tg.initData
  });

  return true;
}

export async function getTelegramUser() {
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram...');

  // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ Telegram
  const isInTelegram = await isTelegramWebApp();
  if (!isInTelegram) {
    throw new Error('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞');
  }

  const tg = window.Telegram.WebApp;
  let user = null;

  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ initDataUnsafe (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
  if (tg.initDataUnsafe?.user) {
    user = tg.initDataUnsafe.user;
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω –∏–∑ initDataUnsafe');
  }
  // –ü–∞—Ä—Å–∏–º –∏–∑ initData –∫–∞–∫ fallback
  else if (tg.initData) {
    try {
      const urlParams = new URLSearchParams(tg.initData);
      const userJson = urlParams.get('user');
      if (userJson) {
        user = JSON.parse(decodeURIComponent(userJson));
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω –∏–∑ initData');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', error);
    }
  }

  // –£–ë–†–ê–ù–û: –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ fallback'–∏ - –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–π Telegram
  if (!user?.id) {
    console.error('‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram');
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞.');
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const validatedUser = {
    id: Number(user.id),
    first_name: user.first_name ? String(user.first_name).trim() : null,
    last_name: user.last_name ? String(user.last_name).trim() : null,
    username: user.username ? String(user.username).trim() : null,
    language_code: user.language_code || "ru",
    is_premium: Boolean(user.is_premium),
    photo_url: user.photo_url || null,
  };

  // –ö–†–ò–¢–ò–ß–ù–û: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º
  if (!validatedUser.id || validatedUser.id < 1) {
    throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }

  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã:', {
    id: validatedUser.id,
    first_name: validatedUser.first_name,
    username: validatedUser.username,
    has_photo: !!validatedUser.photo_url
  });

  return validatedUser;
}

export async function initTelegramWebApp() {
  console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp...');

  const isInTelegram = await isTelegramWebApp();
  if (!isInTelegram) {
    throw new Error('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞!');
  }

  const tg = window.Telegram.WebApp;

  try {
    // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    tg.ready();
    tg.expand();

    const version = parseFloat(tg.version || '6.0');

    // –í–∫–ª—é—á–∞–µ–º –¥–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
    if (version >= 6.1 && typeof tg.enableVerticalSwipes === 'function') {
      tg.enableVerticalSwipes();
    }

    if (version >= 6.2 && typeof tg.enableClosingConfirmation === 'function') {
      tg.enableClosingConfirmation();
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
    try {
      if (typeof tg.setHeaderColor === 'function') {
        tg.setHeaderColor('secondary_bg_color');
      }
    } catch (e) {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç–∞:', e);
    }

    // –°–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ Telegram
    if (tg.MainButton) tg.MainButton.hide();
    if (tg.BackButton) tg.BackButton.hide();

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∏–∑ Telegram
    if (tg.themeParams?.bg_color) {
      const bgColor = tg.themeParams.bg_color;
      const hex = bgColor.replace('#', '');
      const r = parseInt(hex.substr(0, 2), 16);
      const g = parseInt(hex.substr(2, 2), 16);
      const b = parseInt(hex.substr(4, 2), 16);
      const brightness = (r * 299 + g * 587 + b * 114) / 1000;
      const themeClass = brightness < 128 ? 'theme-dark' : 'theme-light';
      document.documentElement.className = themeClass;
    }

    console.log('üéâ Telegram WebApp —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', error);
    throw error;
  }
}

export function sendDataToTelegramBot(data) {
  if (!window.Telegram?.WebApp?.sendData) {
    console.error('‚ùå SendData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≤ Telegram');
    return false;
  }

  try {
    if (!data || typeof data !== 'object') {
      console.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç');
      return false;
    }

    const jsonData = JSON.stringify(data);
    if (jsonData.length > 4096) { // Telegram –ª–∏–º–∏—Ç
      console.error('‚ùå –î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–æ—Ç');
      return false;
    }

    window.Telegram.WebApp.sendData(jsonData);
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram –±–æ—Ç:', data);
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ—Ç:', error);
    return false;
  }
}