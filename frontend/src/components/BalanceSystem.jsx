// frontend/src/components/BalanceSystem.jsx - –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–û
import React, { useState, useEffect, useCallback, useMemo, useRef } from "react";
import { sendDataToTelegramBot } from "../utils/telegram";
import { balanceAPI, fileUtils } from "../services/api";

const QUICK_AMOUNTS = [500, 1000, 2500, 5000, 10000];

// Notification component
const NotificationSystem = ({ notifications, onClose }) => (
  <div className="notifications-container">
    {notifications.map(notif => (
      <div key={notif.id} className={`notification notification-${notif.type}`}>
        <div className="notification-content">
          <span>{notif.message}</span>
          <button
            className="notification-close"
            onClick={() => onClose(notif.id)}
          >
            √ó
          </button>
        </div>
      </div>
    ))}
  </div>
);

const formatDateTime = (dateStr) => {
  return new Date(dateStr).toLocaleString('ru-RU', {
    day: '2-digit', month: '2-digit', year: '2-digit',
    hour: '2-digit', minute: '2-digit'
  });
};

const getStatusInfo = (status) => {
  const statusMap = {
    'pending': { text: '–°–æ–∑–¥–∞–Ω–∞', class: 'pending', icon: '‚è≥' },
    'receipt_uploaded': { text: '–ß–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω', class: 'processing', icon: 'üìé' },
    'waiting_admin': { text: '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ', class: 'processing', icon: 'üîç' },
    'approved': { text: '–ó–∞—á–∏—Å–ª–µ–Ω–æ', class: 'success', icon: '‚úÖ' },
    'rejected': { text: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ', class: 'error', icon: '‚ùå' }
  };
  return statusMap[status] || { text: status, class: 'pending', icon: '‚ùì' };
};

export default function BalanceSystem({ user, telegramUser, onBack }) {
  const [step, setStep] = useState('methods');
  const [selectedMethod, setSelectedMethod] = useState('card');
  const [amount, setAmount] = useState('');
  const [loading, setLoading] = useState(false);
  const [paymentData, setPaymentData] = useState(null);
  const [copiedField, setCopiedField] = useState('');
  const [requests, setRequests] = useState([]);
  const [paymentMethods, setPaymentMethods] = useState([]);
  const [notifications, setNotifications] = useState([]);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤
  const [receiptFile, setReceiptFile] = useState(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [dragOver, setDragOver] = useState(false);
  const [uploadedReceiptPreview, setUploadedReceiptPreview] = useState(null);

  const fileInputRef = useRef(null);
  const timersRef = useRef([]);
  const mountedRef = useRef(true);
  const initializedRef = useRef(false); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é

  useEffect(() => {
    return () => {
      mountedRef.current = false;
      timersRef.current.forEach(timer => clearTimeout(timer));
    };
  }, []);

  const currentMethod = useMemo(() =>
    paymentMethods.find(m => m.id === selectedMethod) || null,
    [paymentMethods, selectedMethod]
  );

  const numAmount = useMemo(() => {
    const parsed = parseFloat(amount);
    return isNaN(parsed) ? 0 : parsed;
  }, [amount]);

  const isValidAmount = useMemo(() => {
    if (!currentMethod || numAmount <= 0) return false;
    const minAmount = currentMethod.min_amount || 100;
    const maxAmount = currentMethod.max_amount || 100000;
    return numAmount >= minAmount && numAmount <= maxAmount;
  }, [currentMethod, numAmount]);

  const showNotification = useCallback((message, type = 'info') => {
    if (!mountedRef.current) return;

    const id = Date.now() + Math.random();
    setNotifications(prev => [...prev, { id, message, type }]);

    const timer = setTimeout(() => {
      if (mountedRef.current) {
        setNotifications(prev => prev.filter(n => n.id !== id));
      }
    }, 5000);

    timersRef.current.push(timer);
  }, []);

  const closeNotification = useCallback((id) => {
    setNotifications(prev => prev.filter(n => n.id !== id));
  }, []);

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  useEffect(() => {
    if (initializedRef.current) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    initializedRef.current = true;

    let cancelled = false;

    const loadPaymentMethods = async () => {
      try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–æ–¥—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è...');
        const methods = await balanceAPI.getPaymentMethods();

        if (!cancelled && mountedRef.current) {
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –º–µ—Ç–æ–¥—ã:', methods);

          // –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ω–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ enabled, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã
          setPaymentMethods(methods || []);

          // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–µ—Ç–æ–¥
          const enabledMethods = methods.filter(m => m.enabled);
          if (enabledMethods.length > 0) {
            setSelectedMethod(enabledMethods[0].id);
          } else if (methods.length > 0) {
            setSelectedMethod(methods[0].id);
          }
        }
      } catch (error) {
        if (!cancelled && mountedRef.current) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–¥–æ–≤:', error);
          showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç–æ–¥–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', 'error');

          // Fallback –º–µ—Ç–æ–¥—ã
          const fallbackMethods = [{
            id: 'card',
            name: '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
            icon: 'üí≥',
            description: 'Visa, MasterCard, –ú–ò–†',
            min_amount: 100,
            max_amount: 100000,
            commission: 0,
            processing_time: '5-15 –º–∏–Ω—É—Ç',
            enabled: true
          }];

          setPaymentMethods(fallbackMethods);
          setSelectedMethod('card');
        }
      }
    };

    const loadUserRequests = async () => {
      if (!user?.tg_id && !telegramUser?.id) return;

      try {
        console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user?.tg_id || telegramUser?.id);
        const tgId = user?.tg_id || telegramUser?.id;
        const userRequests = await balanceAPI.getUserBalanceRequests(tgId);

        if (!cancelled && mountedRef.current) {
          console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞—è–≤–∫–∏:', userRequests);
          const sortedRequests = userRequests
            .filter(req => req && typeof req === 'object')
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
          setRequests(sortedRequests);
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫:', error);
      }
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    Promise.all([loadPaymentMethods(), loadUserRequests()]);

    return () => { cancelled = true; };
  }, []); // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  const copyWithFeedback = useCallback(async (text, field) => {
    try {
      await navigator.clipboard.writeText(text);
      if (mountedRef.current) {
        setCopiedField(field);
        showNotification(`–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${text}`, 'success');
        const timer = setTimeout(() => {
          if (mountedRef.current) setCopiedField('');
        }, 2000);
        timersRef.current.push(timer);
      }
    } catch (error) {
      showNotification(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å`, 'error');
    }
  }, [showNotification]);

  const validateFile = (file) => {
    const maxSize = 25 * 1024 * 1024;
    const allowedTypes = [
      'image/jpeg', 'image/jpg', 'image/png', 'image/webp',
      'image/heic', 'image/heif',
      'application/pdf'
    ];

    if (!allowedTypes.includes(file.type)) {
      throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPG, PNG, WebP, PDF, HEIC');
    }

    if (file.size > maxSize) {
      throw new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º ${Math.round(maxSize / (1024 * 1024))} –ú–ë`);
    }

    return true;
  };

  const handleFileSelect = useCallback(async (file) => {
    try {
      validateFile(file);
      setReceiptFile(file);

      if (fileUtils.isImage(file)) {
        const preview = await fileUtils.createImagePreview(file);
        setUploadedReceiptPreview(preview);
      } else {
        setUploadedReceiptPreview(null);
      }

      showNotification(`–§–∞–π–ª –≤—ã–±—Ä–∞–Ω: ${file.name}`, 'success');
    } catch (error) {
      showNotification(error.message, 'error');
      setReceiptFile(null);
      setUploadedReceiptPreview(null);
    }
  }, [showNotification]);

  const handleFileInputChange = useCallback((e) => {
    const file = e.target.files[0];
    if (file) handleFileSelect(file);
  }, [handleFileSelect]);

  const handleDragOver = useCallback((e) => {
    e.preventDefault();
    setDragOver(true);
  }, []);

  const handleDragLeave = useCallback((e) => {
    e.preventDefault();
    setDragOver(false);
  }, []);

  const handleDrop = useCallback((e) => {
    e.preventDefault();
    setDragOver(false);
    const file = e.dataTransfer.files[0];
    if (file) handleFileSelect(file);
  }, [handleFileSelect]);

  const createBalanceRequest = useCallback(async () => {
    if (!isValidAmount || loading) return;

    const tgId = user?.tg_id || telegramUser?.id;
    if (!tgId) {
      showNotification('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID', 'error');
      return;
    }

    setLoading(true);
    try {
      const response = await balanceAPI.createBalanceRequest({
        tg_id: tgId,
        amount: numAmount,
        method: selectedMethod
      });

      if (mountedRef.current) {
        setPaymentData({
          orderId: response.order_id,
          amount: response.amount,
          method: response.method,
          status: response.status,
          createdAt: response.created_at,
          paymentDetails: response.payment_details,
          userInfo: response.user_info
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
        const tgId = user?.tg_id || telegramUser?.id;
        try {
          const userRequests = await balanceAPI.getUserBalanceRequests(tgId);
          const sortedRequests = userRequests
            .filter(req => req && typeof req === 'object')
            .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
          setRequests(sortedRequests);
        } catch (e) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:', e);
        }

        setStep('payment');
        showNotification(`–ó–∞—è–≤–∫–∞ ‚Ññ${response.order_id} —Å–æ–∑–¥–∞–Ω–∞`, 'success');
      }
    } catch (error) {
      showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
      if (mountedRef.current) {
        setLoading(false);
      }
    }
  }, [isValidAmount, loading, user, telegramUser, numAmount, selectedMethod, showNotification]);

  const uploadReceipt = useCallback(async () => {
    if (!receiptFile || !paymentData) return;

    setLoading(true);
    setUploadProgress(0);

    try {
      const progressInterval = setInterval(() => {
        setUploadProgress(prev => Math.min(prev + 10, 90));
      }, 100);

      const response = await balanceAPI.uploadReceipt(paymentData.orderId, receiptFile);

      clearInterval(progressInterval);
      setUploadProgress(100);

      if (mountedRef.current) {
        setPaymentData(prev => ({ ...prev, status: 'receipt_uploaded' }));
        showNotification('–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', 'success');

        setTimeout(() => {
          if (mountedRef.current) {
            setUploadProgress(0);
          }
        }, 1000);
      }
    } catch (error) {
      setUploadProgress(0);
      showNotification(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`, 'error');
    } finally {
      if (mountedRef.current) {
        setLoading(false);
      }
    }
  }, [receiptFile, paymentData, showNotification]);

  const confirmPayment = useCallback(async () => {
    if (!paymentData) return;

    if (paymentData.status !== 'receipt_uploaded') {
      showNotification('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ', 'error');
      return;
    }

    const confirmText = `–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ:
‚Ä¢ –ü–µ—Ä–µ–≤–µ–ª–∏ —Ç–æ—á–Ω—É—é —Å—É–º–º—É ‚ÇΩ${paymentData.amount.toLocaleString()}
‚Ä¢ –ü—Ä–∏–ª–æ–∂–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ
‚Ä¢ –ì–æ—Ç–æ–≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É?

–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏—á–µ–≥–æ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è.`;

    if (!confirm(confirmText)) {
      return;
    }

    setLoading(true);
    try {
      await balanceAPI.markPaid(paymentData.orderId);

      const adminNotification = {
        type: 'payment_confirmation',
        data: {
          orderId: paymentData.orderId,
          userId: user?.tg_id || telegramUser?.id,
          userName: paymentData.userInfo?.name || user?.first_name || telegramUser?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          username: paymentData.userInfo?.username || user?.username || telegramUser?.username || null,
          amount: paymentData.amount,
          method: currentMethod?.name || '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞',
          createdAt: paymentData.createdAt,
          paidAt: new Date().toISOString(),
          receiptUploaded: true,
          paymentDetails: paymentData.paymentDetails
        }
      };

      const success = sendDataToTelegramBot(adminNotification);
      if (success) {
        console.log('üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }

      setPaymentData(prev => ({ ...prev, status: 'waiting_admin' }));

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫
      const tgId = user?.tg_id || telegramUser?.id;
      try {
        const userRequests = await balanceAPI.getUserBalanceRequests(tgId);
        const sortedRequests = userRequests
          .filter(req => req && typeof req === 'object')
          .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
        setRequests(sortedRequests);
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:', e);
      }

      setStep('success');

    } catch (error) {
      showNotification(`–û—à–∏–±–∫–∞: ${error.message}`, 'error');
    } finally {
      if (mountedRef.current) {
        setLoading(false);
      }
    }
  }, [paymentData, user, telegramUser, currentMethod, showNotification]);

  const activeRequestsCount = useMemo(() =>
    requests.filter(r => r && ['pending', 'receipt_uploaded', 'waiting_admin'].includes(r.status)).length,
    [requests]
  );

  // DEBUG INFO
  console.log('üîç BalanceSystem Debug:', {
    step,
    paymentMethods,
    paymentMethodsLength: paymentMethods.length,
    loading,
    selectedMethod,
    currentMethod: currentMethod ? currentMethod.name : 'null'
  });

  return (
    <div className="balance-system">
      <NotificationSystem notifications={notifications} onClose={closeNotification} />

      {/* HEADER */}
      <div className="card mb-xl">
        <button className="btn-secondary mb-lg" onClick={onBack}>‚Üê –ù–∞–∑–∞–¥</button>
        <div className="text-center">
          <div className="balance-icon">üí∞</div>
          <h1 className="page-title mb-sm">–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</h1>
          <div className="text-secondary">
            –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <span className="balance-amount">‚ÇΩ{(user?.balance || 0).toLocaleString()}</span>
          </div>
        </div>
      </div>

      {/* ACTIVE REQUESTS */}
      {activeRequestsCount > 0 && step === 'methods' && (
        <div className="card mb-xl">
          <div className="flex justify-between items-center mb-lg">
            <h3 className="text-lg font-semibold">–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ ({activeRequestsCount})</h3>
            <button className="btn-secondary" onClick={() => setStep('history')}>–í—Å–µ ‚Üí</button>
          </div>
          <div className="grid gap-md">
            {requests
              .filter(r => r && ['pending', 'receipt_uploaded', 'waiting_admin'].includes(r.status))
              .slice(0, 2)
              .map((req) => {
                const statusInfo = getStatusInfo(req.status);
                return (
                  <div
                    key={req.order_id}
                    className="request-item card-interactive"
                    onClick={() => {
                      setPaymentData({
                        orderId: req.order_id,
                        amount: req.amount,
                        method: req.method,
                        status: req.status,
                        createdAt: req.created_at,
                        paymentDetails: req.payment_details || {}
                      });
                      setStep('payment');
                    }}
                  >
                    <div className="request-header">
                      <div className="request-id">#{req.order_id}</div>
                      <div className={`status-badge ${statusInfo.class}`}>
                        {statusInfo.icon} {statusInfo.text}
                        <span className="pulse-indicator">‚óè</span>
                      </div>
                    </div>
                    <div className="request-details">
                      <div className="detail-item">
                        <span>–°—É–º–º–∞:</span>
                        <span className="amount">‚ÇΩ{req.amount.toLocaleString()}</span>
                      </div>
                    </div>
                  </div>
                );
              })}
          </div>
        </div>
      )}

      <div className="card">
        {/* STEP 1: METHODS */}
        {step === 'methods' && (
          <div>
            <h2 className="text-2xl font-bold mb-md">–°–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</h2>
            <p className="text-secondary mb-xl">–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</p>

            {paymentMethods.length === 0 ? (
              <div className="loading-state">
                <div className="loading-spinner"></div>
                <p>–ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–æ–¥—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è...</p>
              </div>
            ) : (
              <div className="payment-methods-grid">
                {paymentMethods.map((method) => (
                  <div
                    key={method.id}
                    className={`payment-method-card ${selectedMethod === method.id ? 'selected' : ''} ${!method.enabled ? 'disabled' : ''}`}
                    onClick={() => {
                      if (method.enabled) {
                        setSelectedMethod(method.id);
                        setStep('amount');
                      }
                    }}
                  >
                    <div className="payment-method-icon">{method.icon}</div>
                    <div className="payment-method-name">
                      {method.name}
                      {!method.enabled && <span className="text-warning ml-sm">(–°–∫–æ—Ä–æ)</span>}
                    </div>
                    <div className="payment-method-description">{method.description}</div>
                    <div className="payment-method-details">
                      ‚ÇΩ{(method.min_amount || 100).toLocaleString()} - ‚ÇΩ{(method.max_amount || 100000).toLocaleString()} ‚Ä¢
                      {method.commission > 0 ? ` –ö–æ–º–∏—Å—Å–∏—è ${method.commission}%` : ' –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏'} ‚Ä¢
                      {method.processing_time || '5-15 –º–∏–Ω—É—Ç'}
                    </div>
                    {method.enabled && <div className="text-accent text-xl">‚Üí</div>}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}

        {/* STEP 2: AMOUNT */}
        {step === 'amount' && currentMethod && (
          <div>
            <button className="btn-secondary mb-lg" onClick={() => setStep('methods')}>‚Üê –ù–∞–∑–∞–¥</button>
            <h2 className="text-2xl font-bold mb-sm">–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</h2>
            <div className="selected-method mb-xl">
              <span>{currentMethod.icon}</span>
              <span>{currentMethod.name}</span>
            </div>

            <div className="currency-input mb-lg">
              <span className="currency-symbol">‚ÇΩ</span>
              <input
                type="text"
                className="amount-input"
                placeholder="0"
                value={amount}
                onChange={(e) => {
                  const value = e.target.value.replace(/[^0-9.]/g, '');
                  if (value.split('.').length <= 2) {
                    setAmount(value);
                  }
                }}
                autoFocus
                autoComplete="off"
                inputMode="decimal"
              />
            </div>

            <div className="amount-info mb-lg">
              <div className="limits">
                –õ–∏–º–∏—Ç—ã: ‚ÇΩ{(currentMethod.min_amount || 100).toLocaleString()} - ‚ÇΩ{(currentMethod.max_amount || 100000).toLocaleString()}
              </div>
              {numAmount > 0 && (
                <div className="amount-preview mb-sm">
                  –ö –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: ‚ÇΩ{numAmount.toLocaleString()}
                </div>
              )}
              <div className="processing-time">
                ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {currentMethod.processing_time || '5-15 –º–∏–Ω—É—Ç'}
              </div>
            </div>

            <div className="quick-amounts mb-xl">
              <span className="quick-label">–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä:</span>
              <div className="quick-buttons">
                {QUICK_AMOUNTS.map((value) => (
                  <button
                    key={value}
                    className="btn-secondary quick-btn"
                    onClick={() => setAmount(value.toString())}
                  >
                    ‚ÇΩ{value.toLocaleString()}
                  </button>
                ))}
              </div>
            </div>

            <button
              className={`btn-primary w-full ${loading ? 'loading' : ''}`}
              onClick={createBalanceRequest}
              disabled={!isValidAmount || loading}
            >
              {loading ? (
                <>
                  <div className="button-spinner"></div>
                  –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É...
                </>
              ) : (
                '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É ‚Üí'
              )}
            </button>
          </div>
        )}

        {/* STEP 3: PAYMENT */}
        {step === 'payment' && paymentData && (
          <div>
            <button className="btn-secondary mb-lg" onClick={() => setStep('methods')}>‚Üê –í –º–µ–Ω—é</button>
            <div className="text-center mb-xl">
              <h2 className="text-2xl font-bold mb-sm">–û–ø–ª–∞—Ç–∞ –∑–∞—è–≤–∫–∏</h2>
              <div className="order-id">#{paymentData.orderId}</div>
            </div>

            {/* Order Info */}
            <div className="order-info mb-lg">
              <div className="info-row">
                <span>–°–æ–∑–¥–∞–Ω–∞:</span>
                <span>{formatDateTime(paymentData.createdAt)}</span>
              </div>
              <div className="info-row">
                <span>–°—Ç–∞—Ç—É—Å:</span>
                <div className={`status-badge ${getStatusInfo(paymentData.status).class}`}>
                  {getStatusInfo(paymentData.status).text}
                </div>
              </div>
              <div className="info-row amount-row">
                <span>–°—É–º–º–∞:</span>
                <button
                  className="copy-button"
                  onClick={() => copyWithFeedback(paymentData.amount.toString(), 'amount')}
                >
                  ‚ÇΩ{paymentData.amount.toLocaleString()}
                  {copiedField === 'amount' ? ' ‚úì' : ' üìã'}
                </button>
              </div>
            </div>

            {/* Payment Details */}
            <div className="payment-details mb-lg">
              <h3 className="mb-lg">üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã</h3>
              <div className="details-grid">
                <div className="detail-row">
                  <span>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</span>
                  <button
                    className="copy-button"
                    onClick={() => copyWithFeedback('5536914123456789', 'card')}
                  >
                    5536 9141 2345 6789
                    {copiedField === 'card' ? ' ‚úì' : ' üìã'}
                  </button>
                </div>
                <div className="detail-row">
                  <span>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</span>
                  <span>VOID SHOP</span>
                </div>
                <div className="detail-row">
                  <span>–ë–∞–Ω–∫:</span>
                  <span>–°–±–µ—Ä –ë–∞–Ω–∫</span>
                </div>
              </div>
            </div>

            {/* File Upload Section */}
            <div className="card mb-lg border-accent">
              <h3 className="mb-md">üìé –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ <span className="text-error">*</span></h3>

              {!receiptFile ? (
                <div
                  className={`file-upload-area ${dragOver ? 'drag-over' : ''}`}
                  onDragOver={handleDragOver}
                  onDragLeave={handleDragLeave}
                  onDrop={handleDrop}
                  onClick={() => fileInputRef.current?.click()}
                >
                  <div className="upload-icon">üìé</div>
                  <div className="upload-text">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</div>
                  <div className="upload-formats">–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP, PDF, HEIC</div>
                  <div className="upload-size">–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 25 –ú–ë</div>

                  <input
                    ref={fileInputRef}
                    type="file"
                    accept="image/*,.pdf,.heic,.heif"
                    onChange={handleFileInputChange}
                    className="hidden"
                  />
                </div>
              ) : (
                <div className="file-uploaded">
                  <div className="file-info mb-md">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-md">
                        <span className="file-icon">üìÑ</span>
                        <div>
                          <div className="file-name">{receiptFile.name}</div>
                          <div className="file-size">{fileUtils.formatFileSize(receiptFile.size)}</div>
                        </div>
                      </div>
                      <button
                        className="btn-secondary"
                        onClick={() => {
                          setReceiptFile(null);
                          setUploadedReceiptPreview(null);
                        }}
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </button>
                    </div>
                  </div>

                  {uploadedReceiptPreview && (
                    <div className="file-preview mb-md">
                      <img
                        src={uploadedReceiptPreview}
                        alt="–ü—Ä–µ–≤—å—é —á–µ–∫–∞"
                        className="preview-image"
                      />
                    </div>
                  )}

                  {uploadProgress > 0 && (
                    <div className="upload-progress mb-md">
                      <div className="progress-text">
                        <span>–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                        <span>{uploadProgress}%</span>
                      </div>
                      <div className="progress-bar">
                        <div
                          className="progress-fill"
                          style={{ width: `${uploadProgress}%` }}
                        ></div>
                      </div>
                    </div>
                  )}

                  {paymentData.status === 'pending' && (
                    <button
                      className={`btn-primary w-full ${loading ? 'loading' : ''}`}
                      onClick={uploadReceipt}
                      disabled={loading}
                    >
                      {loading ? (
                        <>
                          <div className="button-spinner"></div>
                          –ó–∞–≥—Ä—É–∂–∞–µ–º...
                        </>
                      ) : (
                        '–ó–∞–≥—Ä—É–∑–∏—Ç—å —á–µ–∫'
                      )}
                    </button>
                  )}
                </div>
              )}
            </div>

            {/* Instructions */}
            <div className="instructions mb-lg">
              <h4>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ:</h4>
              <ol>
                <li>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏ —Å—É–º–º—É</li>
                <li>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞</li>
                <li>–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ <strong>—Ç–æ—á–Ω—É—é —Å—É–º–º—É</strong> ‚ÇΩ{paymentData.amount.toLocaleString()}</li>
                <li>–°–¥–µ–ª–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ</li>
                <li>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫ –≤ —Ñ–æ—Ä–º–µ –≤—ã—à–µ</li>
                <li>–ù–∞–∂–º–∏—Ç–µ "–Ø –æ–ø–ª–∞—Ç–∏–ª"</li>
                <li>–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (5-15 –º–∏–Ω—É—Ç)</li>
              </ol>
            </div>

            {/* Warning */}
            <div className="warning mb-xl">
              <span className="warning-icon">‚ö†Ô∏è</span>
              <div>
                <strong>–í–∞–∂–Ω–æ:</strong> –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É ‚ÇΩ{paymentData.amount.toLocaleString()}.
                –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ. –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 5-15 –º–∏–Ω—É—Ç.
                <br/><br/>
                <strong>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —á–µ–∫–æ–≤:</strong> JPG, PNG, WebP, PDF, HEIC (iPhone)
              </div>
            </div>

            {/* Action Buttons */}
            <div className="payment-actions">
              <button
                className={`btn-primary confirm-btn ${loading ? 'loading' : ''}`}
                onClick={confirmPayment}
                disabled={loading || paymentData.status !== 'receipt_uploaded'}
              >
                {loading ? (
                  <>
                    <div className="button-spinner"></div>
                    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º...
                  </>
                ) : paymentData.status === 'waiting_admin' ? (
                  <>‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</>
                ) : paymentData.status !== 'receipt_uploaded' ? (
                  <>üìé –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ–∫</>
                ) : (
                  <>‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª</>
                )}
              </button>

              {paymentData.status === 'pending' && (
                <button
                  className="btn-secondary cancel-btn"
                  onClick={() => setStep('methods')}
                >
                  –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É
                </button>
              )}
            </div>
          </div>
        )}

        {/* STEP 4: SUCCESS */}
        {step === 'success' && paymentData && (
          <div className="step-success">
            <div className="success-content">
              <div className="success-icon">‚úÖ</div>
              <h2 className="text-2xl font-bold mb-md">–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</h2>
              <p className="text-secondary mb-lg">
                –ó–∞—è–≤–∫–∞ ‚Ññ{paymentData.orderId} –Ω–∞ —Å—É–º–º—É ‚ÇΩ{paymentData.amount.toLocaleString()}
                –ø—Ä–∏–Ω—è—Ç–∞ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é.
              </p>

              <div className={`status-badge ${getStatusInfo('waiting_admin').class} mb-xl`}>
                ‚è≥ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
              </div>

              <div className="next-steps mb-xl">
                <h4>–ß—Ç–æ –¥–∞–ª—å—à–µ?</h4>
                <ul>
                  <li>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à –ø–ª–∞—Ç–µ–∂ (–æ–±—ã—á–Ω–æ 5-15 –º–∏–Ω—É—Ç)</li>
                  <li>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏</li>
                  <li>–ü—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –±–∞–ª–∞–Ω—Å</li>
                  <li>–ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É</li>
                </ul>
              </div>

              <div className="success-actions">
                <button className="btn-primary w-full" onClick={onBack}>
                  –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å
                </button>
                <button className="btn-secondary w-full" onClick={() => setStep('history')}>
                  –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
                </button>
              </div>
            </div>
          </div>
        )}

        {/* STEP 5: HISTORY */}
        {step === 'history' && (
          <div>
            <button className="btn-secondary mb-lg" onClick={() => setStep('methods')}>‚Üê –ù–∞–∑–∞–¥</button>
            <h2 className="text-2xl font-bold mb-md">–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π</h2>
            <p className="text-secondary mb-xl">–í—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</p>

            {requests.length === 0 ? (
              <div className="empty-state">
                <div className="empty-icon">üí≥</div>
                <h3 className="text-xl font-bold mb-md">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</h3>
                <p className="text-secondary mb-xl">–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</p>
                <button className="btn-primary" onClick={() => setStep('methods')}>
                  –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
                </button>
              </div>
            ) : (
              <div className="requests-list">
                {requests.map((req) => {
                  if (!req || !req.amount) return null;

                  const statusInfo = getStatusInfo(req.status);
                  const isActive = ['pending', 'receipt_uploaded', 'waiting_admin'].includes(req.status);

                  return (
                    <div
                      key={req.order_id}
                      className={`request-item ${isActive ? 'card-interactive border-accent' : ''}`}
                      onClick={() => {
                        if (isActive) {
                          setPaymentData({
                            orderId: req.order_id,
                            amount: req.amount,
                            method: req.method,
                            status: req.status,
                            createdAt: req.created_at,
                            paymentDetails: req.payment_details || {}
                          });
                          setStep('payment');
                        }
                      }}
                      style={{ cursor: isActive ? 'pointer' : 'default' }}
                    >
                      <div className="request-header">
                        <div className="request-id">#{req.order_id}</div>
                        <div className={`status-badge ${statusInfo.class}`}>
                          {statusInfo.icon} {statusInfo.text}
                          {isActive && <span className="pulse-indicator">‚óè</span>}
                        </div>
                      </div>

                      <div className="request-details">
                        <div className="detail-item">
                          <span>–°—É–º–º–∞:</span>
                          <span className="amount">‚ÇΩ{req.amount.toLocaleString()}</span>
                        </div>
                        <div className="detail-item">
                          <span>–î–∞—Ç–∞:</span>
                          <span>{formatDateTime(req.created_at)}</span>
                        </div>
                      </div>

                      <div className="request-footer">
                        {isActive ? (
                          <span className="action-hint">üëÜ –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã</span>
                        ) : req.status === 'rejected' ? (
                          <span className="retry-hint">‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ - –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é</span>
                        ) : req.status === 'approved' ? (
                          <span className="info-hint">‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω—ã</span>
                        ) : (
                          <span>–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è</span>
                        )}
                      </div>
                    </div>
                  );
                }).filter(Boolean)}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}