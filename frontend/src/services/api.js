// frontend/src/services/api.js - –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤
const API_BASE = import.meta.env.VITE_API_BASE || '';

class APIError extends Error {
  constructor(message, status = 0, data = {}) {
    super(message);
    this.name = 'APIError';
    this.status = status;
    this.data = data;
  }
}

async function apiFetch(url, options = {}) {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), options.timeout || 15000);

  const config = {
    method: 'GET',
    headers: {
      'Accept': 'application/json',
      ...(options.headers || {})
    },
    credentials: 'include',
    signal: controller.signal,
    ...options
  };

  // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è FormData (multipart/form-data)
  if (!(options.body instanceof FormData) && config.method !== 'GET') {
    config.headers['Content-Type'] = 'application/json';
  }

  console.log(`üîÑ API: ${config.method} ${API_BASE}${url}`);

  try {
    let response;
    // Retry –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    for (let i = 0; i <= 2; i++) {
      try {
        response = await fetch(`${API_BASE}${url}`, config);
        if (response.ok || response.status < 500) break;
        if (i === 2) break;
        await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, i)));
      } catch (error) {
        if (i === 2 || error.name === 'AbortError') throw error;
        await new Promise(resolve => setTimeout(resolve, 1000 * Math.pow(2, i)));
      }
    }

    console.log(`üì° API: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      let errorData;
      try {
        errorData = await response.json();
      } catch {
        errorData = { detail: `HTTP ${response.status}` };
      }
      throw new APIError(errorData.detail || `HTTP ${response.status}`, response.status, errorData);
    }

    const data = await response.json();
    return data;

  } catch (error) {
    if (error instanceof APIError) throw error;
    if (error.name === 'AbortError') {
      throw new APIError('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è', 0, { type: 'timeout' });
    }
    throw new APIError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 0, { type: 'network' });
  } finally {
    clearTimeout(timeoutId);
  }
}

// USER API - –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ 422 –æ—à–∏–±–∫–∏
export const userAPI = {
  async createOrUpdateUser(userData) {
    // –ö–†–ò–¢–ò–ß–ù–û: –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (!userData?.id || typeof userData.id !== 'number' || userData.id <= 0) {
      throw new APIError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID', 400);
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—á–∏—â–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—è
    const cleanData = {
      tg_id: Number(userData.id),
      username: userData.username ? String(userData.username).trim() : null,
      first_name: userData.first_name ? String(userData.first_name).trim() : null,
      last_name: userData.last_name ? String(userData.last_name).trim() : null,
      city: userData.city ? String(userData.city).trim() : '–ú–æ—Å–∫–≤–∞',
      photo_url: userData.photo_url ? String(userData.photo_url).trim() : null,
      language_code: userData.language_code ? String(userData.language_code).trim() : 'ru',
      is_premium: Boolean(userData.is_premium)
    };

    // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ - –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ null
    Object.keys(cleanData).forEach(key => {
      if (typeof cleanData[key] === 'string' && cleanData[key] === '') {
        cleanData[key] = null;
      }
    });

    console.log('üë§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', cleanData);

    return apiFetch('/api/user', {
      method: 'POST',
      body: JSON.stringify(cleanData),
      timeout: 10000
    });
  },

  async getUserByTgId(tgId) {
    if (!tgId || tgId <= 0) {
      throw new APIError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID', 400);
    }
    return apiFetch(`/api/user/${tgId}`, { timeout: 8000 });
  },

  async getCities() {
    return apiFetch('/api/cities', { timeout: 5000 });
  },

  async getUserStats(tgId) {
    if (!tgId || tgId <= 0) {
      throw new APIError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID', 400);
    }
    return apiFetch(`/api/user/${tgId}/stats`, { timeout: 5000 });
  }
};

// CAPTCHA API
export const captchaAPI = {
  async getCaptcha() {
    return apiFetch('/api/captcha', { timeout: 10000 });
  },

  async verifyCaptcha(token, answer) {
    if (!token || !answer) {
      throw new APIError('–¢–æ–∫–µ–Ω –∏ –æ—Ç–≤–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 400);
    }
    return apiFetch('/api/verify_captcha', {
      method: 'POST',
      body: JSON.stringify({ token, answer: String(answer).trim() }),
      timeout: 8000
    });
  }
};

// STORES API
export const storesAPI = {
  async getStores(params = {}) {
    const searchParams = new URLSearchParams();
    if (params.city) searchParams.append('city', params.city);
    if (params.featured !== undefined) searchParams.append('featured', params.featured);
    if (params.limit) searchParams.append('limit', Math.min(params.limit, 100));
    if (params.offset) searchParams.append('offset', params.offset);

    return apiFetch(`/api/stores?${searchParams}`, { timeout: 12000 });
  },

  async getCategories() {
    return apiFetch('/api/stores/categories/', { timeout: 8000 });
  },

  async searchProducts(query = '', params = {}) {
    const searchParams = new URLSearchParams();
    searchParams.append('query', query);
    if (params.category) searchParams.append('category', params.category);
    if (params.city) searchParams.append('city', params.city);
    if (params.limit) searchParams.append('limit', Math.min(params.limit, 100));
    if (params.offset) searchParams.append('offset', params.offset);

    return apiFetch(`/api/stores/search/?${searchParams}`, { timeout: 15000 });
  },

  async getProduct(productId) {
    if (!productId) {
      throw new APIError('ID —Ç–æ–≤–∞—Ä–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 400);
    }
    return apiFetch(`/api/stores/product/${productId}`, { timeout: 8000 });
  },

  async getCategoryProducts(categorySlug, params = {}) {
    if (!categorySlug) {
      throw new APIError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞', 400);
    }

    const searchParams = new URLSearchParams();
    if (params.city) searchParams.append('city', params.city);
    if (params.limit) searchParams.append('limit', params.limit);
    if (params.offset) searchParams.append('offset', params.offset);

    return apiFetch(`/api/stores/category/${categorySlug}?${searchParams}`, { timeout: 10000 });
  }
};

// BALANCE API - –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤
export const balanceAPI = {
  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
  async createBalanceRequest(data) {
    if (!data.tg_id || data.tg_id <= 0) {
      throw new APIError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID', 400);
    }

    if (!data.amount || data.amount <= 0) {
      throw new APIError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞', 400);
    }

    const requestData = {
      tg_id: Number(data.tg_id),
      amount: Number(data.amount),
      method: String(data.method || 'card')
    };

    console.log('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:', requestData);

    return apiFetch('/api/balance/create', {
      method: 'POST',
      body: JSON.stringify(requestData),
      timeout: 10000
    });
  },

  // –ù–û–í–û–ï: –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞
  async uploadReceipt(orderId, file) {
    if (!orderId) {
      throw new APIError('–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 400);
    }

    if (!file) {
      throw new APIError('–§–∞–π–ª —á–µ–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 400);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const maxSize = 25 * 1024 * 1024; // 25MB
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'application/pdf'];

    if (!allowedTypes.includes(file.type)) {
      throw new APIError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPG, PNG, WebP, PDF', 400);
    }

    if (file.size > maxSize) {
      throw new APIError(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º ${Math.round(maxSize / (1024 * 1024))} –ú–ë`, 400);
    }

    const formData = new FormData();
    formData.append('file', file);

    console.log(`üìé –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ ${orderId}: ${file.name} (${file.size} bytes)`);

    return apiFetch(`/api/balance/upload-receipt/${orderId}`, {
      method: 'POST',
      body: formData, // FormData –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç multipart/form-data
      timeout: 30000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    });
  },

  // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–º–µ—Ç–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ
  async markPaid(orderId) {
    if (!orderId) {
      throw new APIError('–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω', 400);
    }

    console.log('‚úÖ –û—Ç–º–µ—Ç–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ:', orderId);

    return apiFetch(`/api/balance/mark-paid/${orderId}`, {
      method: 'POST',
      body: JSON.stringify({}),
      timeout: 8000
    });
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserBalanceRequests(tgId) {
    if (!tgId || tgId <= 0) {
      throw new APIError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID', 400);
    }
    return apiFetch(`/api/balance/requests/${tgId}`, { timeout: 8000 });
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
  async getPaymentMethods() {
    return apiFetch('/api/balance/methods', { timeout: 5000 });
  },

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  async processBalanceRequest(orderId, action, adminComment = null) {
    if (!orderId || !action) {
      throw new APIError('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã orderId –∏ action –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã', 400);
    }

    if (!['approve', 'reject'].includes(action)) {
      throw new APIError('–î–µ–π—Å—Ç–≤–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å approve –∏–ª–∏ reject', 400);
    }

    return apiFetch(`/api/balance/process/${orderId}`, {
      method: 'POST',
      body: JSON.stringify({
        action: String(action),
        admin_comment: adminComment ? String(adminComment) : null
      }),
      timeout: 10000
    });
  }
};

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
export const fileUtils = {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
   */
  isValidFileType(file) {
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'application/pdf'];
    return allowedTypes.includes(file.type);
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
   */
  isValidFileSize(file, maxSizeMB = 25) {
    return file.size <= maxSizeMB * 1024 * 1024;
  },

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
   */
  formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  },

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞
   */
  getFileExtension(filename) {
    return filename.slice((filename.lastIndexOf(".") - 1 >>> 0) + 2);
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   */
  isImage(file) {
    return file.type.startsWith('image/');
  },

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ preview –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async createImagePreview(file) {
    if (!this.isImage(file)) return null;

    return new Promise((resolve) => {
      const reader = new FileReader();
      reader.onload = (e) => resolve(e.target.result);
      reader.readAsDataURL(file);
    });
  }
};

export { APIError };