// frontend/src/App.jsx - –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
import React, { useEffect, useState } from "react";
import Captcha from "./pages/Captcha";
import CitySelector from "./components/CitySelector";
import Header from "./components/Header";
import Home from "./pages/Home";
import News from "./pages/News";
import Profile from "./pages/Profile";
import Settings from "./pages/Settings";
import CategoryPage from "./pages/CategoryPage";
import ProductPage from "./pages/ProductPage"; // –ù–û–í–û–ï
import CheckoutPage from "./pages/CheckoutPage"; // –ù–û–í–û–ï
import CatalogModal from "./components/CatalogModal";
import BalanceSystem from "./components/BalanceSystem";
import BottomNav from "./components/BottomNav";
import ErrorBoundary from "./components/ErrorBoundary";
import LoadingSpinner from "./components/LoadingSpinner"; // <-- –∏–º–ø–æ—Ä—Ç –æ–±—â–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∑–∫–∏
import { getTelegramUser, initTelegramWebApp } from "./utils/telegram";
import { userAPI } from "./services/api";
import "./styles/global.css";

const withTimeout = (promise, ms = 3000) => {
  const timeout = new Promise((_, reject) =>
    setTimeout(() => reject(new Error('Timeout')), ms)
  );
  return Promise.race([promise, timeout]);
};

function PageWrapper({ children }) {
  const [enter, setEnter] = useState(false);
  useEffect(() => {
    const timer = requestAnimationFrame(() => setEnter(true));
    return () => cancelAnimationFrame(timer);
  }, []);

  return (
    <div
      className={`page-transition ${enter ? 'enter' : ''}`}
      style={{
        opacity: enter ? 1 : 0,
        transform: enter ? 'translateY(0)' : 'translateY(16px)',
        transition: 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)'
      }}
    >
      {children}
    </div>
  );
}

export default function App() {
  const [appState, setAppState] = useState("loading");
  const [page, setPage] = useState("home");
  const [city, setCity] = useState(null);
  const [user, setUser] = useState(null);
  const [telegramUser, setTelegramUser] = useState(null);
  const [initError, setInitError] = useState(null);
  const [isOffline, setIsOffline] = useState(false);

  // –ú–æ–¥–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const [showCatalog, setShowCatalog] = useState(false);
  const [currentCategory, setCurrentCategory] = useState(null);
  const [currentProduct, setCurrentProduct] = useState(null);
  const [showProductModal, setShowProductModal] = useState(false); // –ù–û–í–û–ï
  const [showProductPage, setShowProductPage] = useState(false); // –ù–û–í–û–ï
  const [checkoutData, setCheckoutData] = useState(null); // –ù–û–í–û–ï

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–∞–Ω—Å–∞
  const [showBalanceSystem, setShowBalanceSystem] = useState(false);

  useEffect(() => {
    initializeApp();
  }, []);

  // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  useEffect(() => {
    const handleNavigateToBalance = (event) => {
      console.log('üéØ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é –±–∞–ª–∞–Ω—Å–∞:', event.detail);
      setShowBalanceSystem(true);
      setPage('profile');
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª–∫–∏
      setShowProductModal(false);
      setShowProductPage(false);
      setCheckoutData(null);
    };

    const handleNavigateToCheckout = (event) => {
      console.log('üõí –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞:', event.detail);
      setCheckoutData(event.detail);
      setShowProductPage(false);
      setShowProductModal(false);
    };

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    window.navigateToBalance = () => {
      console.log('üéØ –í—ã–∑–≤–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è navigateToBalance');
      setShowBalanceSystem(true);
      setPage('profile');
    };

    window.navigateToCheckout = (data) => {
      console.log('üõí –í—ã–∑–≤–∞–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è navigateToCheckout');
      setCheckoutData(data);
    };

    window.addEventListener('navigate-to-balance', handleNavigateToBalance);
    window.addEventListener('navigate-to-checkout', handleNavigateToCheckout);

    return () => {
      window.removeEventListener('navigate-to-balance', handleNavigateToBalance);
      window.removeEventListener('navigate-to-checkout', handleNavigateToCheckout);
      delete window.navigateToBalance;
      delete window.navigateToCheckout;
    };
  }, []);

  async function initializeApp() {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Void Shop...');

      await withTimeout(initTelegramWebApp(), 5000);
      const tgUser = await withTimeout(getTelegramUser(), 3000);

      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram:', {
        id: tgUser.id,
        first_name: tgUser.first_name,
        username: tgUser.username
      });

      setTelegramUser(tgUser);

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      try {
        const savedTheme = localStorage.getItem("voidshop_theme");
        if (savedTheme && savedTheme !== "auto") {
          document.documentElement.className = savedTheme === "dark" ? "theme-dark" : "theme-light";
        }

        const savedCity = localStorage.getItem("voidshop_city");
        if (savedCity) {
          setCity(savedCity);
        }
      } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage:', e);
      }

      setAppState("captcha");

    } catch (error) {
      console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:", error);
      setInitError(error.message);
      setAppState("error");
    }
  }

  async function handleCaptchaPassed() {
    console.log("‚úÖ –ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞");

    if (city) {
      await createOrUpdateUser(city);
    } else {
      setAppState("city");
    }
  }

  async function handleCitySelected(selectedCity) {
    console.log("üèôÔ∏è –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥:", selectedCity);
    setCity(selectedCity);
    localStorage.setItem("voidshop_city", selectedCity);
    await createOrUpdateUser(selectedCity);
  }

  async function createOrUpdateUser(selectedCity) {
    if (!telegramUser) {
      console.warn('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
      setAppState("app");
      return;
    }

    try {
      console.log("üë§ –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");

      if (!telegramUser?.id || typeof telegramUser.id !== 'number' || telegramUser.id <= 0) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      const userData = await withTimeout(
        userAPI.createOrUpdateUser({
          ...telegramUser,
          city: selectedCity
        }),
        5000
      );

      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω:", userData.id);
      setUser(userData);
      setIsOffline(false);
      setAppState("app");

    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:", error);
      console.warn('Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ offline —Ä–µ–∂–∏–º–µ');
      setIsOffline(true);

      const offlineUser = {
        id: null,
        tg_id: telegramUser.id,
        username: telegramUser.username,
        first_name: telegramUser.first_name,
        last_name: telegramUser.last_name,
        city: selectedCity,
        balance: 0,
        registered_at: new Date(),
        last_active: new Date(),
        is_verified: false,
        avatar_url: telegramUser.photo_url
      };

      setUser(offlineUser);
      setAppState("app");
    }
  }

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è
  function handleNavigate(newPage) {
    if (newPage === page) return;
    console.log("üì± –ù–∞–≤–∏–≥–∞—Ü–∏—è:", page, "->", newPage);

    if (newPage === 'profile' && showBalanceSystem) {
      // –°–∏—Å—Ç–µ–º–∞ –±–∞–ª–∞–Ω—Å–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑–∞—Ç—å—Å—è
    } else {
      setShowBalanceSystem(false);
    }

    setPage(newPage);
    setShowCatalog(false);
    setCurrentCategory(null);
    setCurrentProduct(null);
    setShowProductModal(false);
    setShowProductPage(false);
    setCheckoutData(null);
    window.scrollTo({ top: 0, behavior: "smooth" });
  }

  function handleCatalogClick() {
    setShowCatalog(true);
  }

  function handleCategoryClick(category) {
    setCurrentCategory(category);
    setPage("category");
    setShowCatalog(false);
  }

  // –û–ë–ù–û–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä—É
  function handleProductClick(product, openAsPage = false) {
    setCurrentProduct(product);

    if (openAsPage) {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
      setShowProductPage(true);
      setShowProductModal(false);
    } else {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
      setShowProductModal(true);
      setShowProductPage(false);
    }
  }

  function handleBackFromCategory() {
    setCurrentCategory(null);
    setPage("home");
  }

  function handleCloseProduct() {
    setCurrentProduct(null);
    setShowProductModal(false);
    setShowProductPage(false);
  }

  function handleCityChange(newCity) {
    setCity(newCity);
    localStorage.setItem("voidshop_city", newCity);

    if (user && telegramUser && !isOffline) {
      withTimeout(
        userAPI.createOrUpdateUser({ ...telegramUser, city: newCity }),
        3000
      ).catch(error => {
        console.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", error);
        setIsOffline(true);
      });
    }
  }

  // –ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  const handleNavigateToBalance = () => {
    setShowBalanceSystem(true);
    setPage('profile');
    setShowProductPage(false);
    setShowProductModal(false);
    setCheckoutData(null);
  };

  const handleNavigateToCheckout = (orderData) => {
    setCheckoutData(orderData);
    setShowProductPage(false);
    setShowProductModal(false);
  };

  const handleOrderComplete = (order) => {
    console.log('‚úÖ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', order);
    alert(`–ó–∞–∫–∞–∑ ${order.id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`);
    setCheckoutData(null);
    setCurrentProduct(null);
    handleNavigate('home');
  };

  // –≠–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏
  if (appState === "error") {
    return (
      <ErrorBoundary>
        <div className="error-screen">
          <div className="error-container">
            <div className="error-logo">‚ö†Ô∏è</div>
            <h2>–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞</h2>
            <p className="error-message">{initError}</p>
            <div className="error-instructions">
              <h3>–ö–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:</h3>
              <ul>
                <li>–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ—Ç–∫—Ä—ã–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞</li>
                <li>–ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ</li>
                <li>–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start</li>
              </ul>
            </div>
            <button
              onClick={() => window.location.reload()}
              className="retry-button"
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        </div>
      </ErrorBoundary>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ ‚Äî –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –æ–±—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç LoadingSpinner
  if (appState === "loading") {
    return (
      <div className="loading-state" style={{ minHeight: '100vh' }}>
        <div className="loading-container">
          <div className="loading-logo">V</div>
          <LoadingSpinner text="–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Void Shop..." icon="üõ∏" size="large" />
          <p>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...</p>
        </div>
      </div>
    );
  }

  if (appState === "captcha") {
    return (
      <ErrorBoundary>
        <Captcha onOk={handleCaptchaPassed} />
      </ErrorBoundary>
    );
  }

  if (appState === "city") {
    return (
      <ErrorBoundary>
        <CitySelector onSelect={handleCitySelected} defaultCity={city} />
      </ErrorBoundary>
    );
  }

  // –ü–æ–∫–∞–∑ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–∞–Ω—Å–∞
  if (showBalanceSystem && page === 'profile') {
    return (
      <ErrorBoundary>
        <div className="app-container">
          <BalanceSystem
            user={user}
            telegramUser={telegramUser}
            onBack={() => setShowBalanceSystem(false)}
          />
        </div>
      </ErrorBoundary>
    );
  }

  // –ù–û–í–û–ï: –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞
  if (showProductPage && currentProduct) {
    return (
      <ErrorBoundary>
        <div className="app-container">
          <ProductPage
            product={currentProduct}
            user={user}
            onBack={handleCloseProduct}
            onNavigateToBalance={handleNavigateToBalance}
            onNavigateToCheckout={handleNavigateToCheckout}
          />
        </div>
      </ErrorBoundary>
    );
  }

  // –ù–û–í–û–ï: –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
  if (checkoutData) {
    return (
      <ErrorBoundary>
        <div className="app-container">
          <CheckoutPage
            orderData={checkoutData}
            onBack={() => setCheckoutData(null)}
            onOrderComplete={handleOrderComplete}
            onNavigateToBalance={handleNavigateToBalance}
          />
        </div>
      </ErrorBoundary>
    );
  }

  // –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  return (
    <ErrorBoundary>
      <div className="app-container">
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä offline —Ä–µ–∂–∏–º–∞ */}
        {isOffline && (
          <div className="offline-banner">
            <span className="offline-icon">üì°</span>
            <span>Offline —Ä–µ–∂–∏–º - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</span>
          </div>
        )}

        <Header onCatalogClick={handleCatalogClick} />

        <main className="main-content">
          <div className="container">
            {page === "home" && (
              <PageWrapper key="home">
                <Home
                  city={city || "–ú–æ—Å–∫–≤–∞"}
                  user={user}
                  isOffline={isOffline}
                  onNavigateToCategory={handleCategoryClick}
                  onProductClick={handleProductClick}
                  onCatalogClick={handleCatalogClick}
                />
              </PageWrapper>
            )}

            {page === "news" && (
              <PageWrapper key="news">
                <News />
              </PageWrapper>
            )}

            {page === "profile" && (
              <PageWrapper key="profile">
                <Profile
                  city={city || "–ú–æ—Å–∫–≤–∞"}
                  setCity={handleCityChange}
                  user={user}
                  telegramUser={telegramUser}
                  isOffline={isOffline}
                  onShowBalanceSystem={() => setShowBalanceSystem(true)}
                />
              </PageWrapper>
            )}

            {page === "settings" && (
              <PageWrapper key="settings">
                <Settings />
              </PageWrapper>
            )}

            {page === "category" && currentCategory && (
              <PageWrapper key="category">
                <CategoryPage
                  category={currentCategory}
                  city={city || "–ú–æ—Å–∫–≤–∞"}
                  isOffline={isOffline}
                  onBack={handleBackFromCategory}
                  onProductClick={handleProductClick}
                />
              </PageWrapper>
            )}
          </div>
        </main>

        {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
        {showCatalog && (
          <CatalogModal
            city={city || "–ú–æ—Å–∫–≤–∞"}
            isOffline={isOffline}
            onClose={() => setShowCatalog(false)}
            onCategoryClick={handleCategoryClick}
          />
        )}

        {showProductModal && currentProduct && (
          <ProductModal
            product={currentProduct}
            user={user}
            isOffline={isOffline}
            onClose={handleCloseProduct}
          />
        )}

        <BottomNav onNavigate={handleNavigate} active={page} />
      </div>
    </ErrorBoundary>
  );
}
