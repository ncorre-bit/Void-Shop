# create_missing_columns.py - –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–î
import sqlite3
import os
from pathlib import Path

# –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = Path("voidshop.db")


def check_column_exists(cursor, table_name, column_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ"""
    try:
        cursor.execute(f"PRAGMA table_info({table_name})")
        columns = [column[1] for column in cursor.fetchall()]
        return column_name in columns
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–æ–Ω–∫–∏ {column_name}: {e}")
        return False


def migrate_database():
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if not DB_PATH.exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False

    print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {DB_PATH}")

    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É user
        missing_columns = [
            ("referral_code", "VARCHAR(10)", "NULL"),
            ("referred_by", "INTEGER", "NULL"),
            ("total_referral_earnings", "REAL", "0.0"),
            ("total_deposits", "REAL", "0.0"),
        ]

        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É user...")

        for column_name, column_type, default_value in missing_columns:
            if not check_column_exists(cursor, "user", column_name):
                print(f"‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É: user.{column_name}")
                cursor.execute(f"ALTER TABLE user ADD COLUMN {column_name} {column_type} DEFAULT {default_value}")
            else:
                print(f"‚úÖ –ö–æ–ª–æ–Ω–∫–∞ user.{column_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
        tables_to_check = ["balancerequest", "store", "product", "category"]

        for table in tables_to_check:
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name=?", (table,))
            if cursor.fetchone():
                print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        indexes = [
            ("idx_user_referral_code", "CREATE INDEX IF NOT EXISTS idx_user_referral_code ON user(referral_code)"),
            ("idx_user_referred_by", "CREATE INDEX IF NOT EXISTS idx_user_referred_by ON user(referred_by)"),
            ("idx_user_tg_id", "CREATE INDEX IF NOT EXISTS idx_user_tg_id ON user(tg_id)"),
        ]

        print("üîß –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...")
        for index_name, query in indexes:
            try:
                cursor.execute(query)
                print(f"‚úÖ –ò–Ω–¥–µ–∫—Å {index_name} —Å–æ–∑–¥–∞–Ω")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ò–Ω–¥–µ–∫—Å {index_name}: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã user
        print("\nüìã –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user:")
        cursor.execute("PRAGMA table_info(user)")
        for row in cursor.fetchall():
            print(f"  - {row[1]}: {row[2]} {'(PK)' if row[5] else ''}")

        return True

    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        conn.rollback()
        return False
    finally:
        conn.close()


def backup_database():
    """–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if DB_PATH.exists():
        backup_path = DB_PATH.with_suffix('.db.backup')
        try:
            import shutil
            shutil.copy2(DB_PATH, backup_path)
            print(f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_path}")
            return True
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}")
            return False
    return False


if __name__ == "__main__":
    print("üöÄ –ú–ò–ì–†–ê–¶–ò–Ø –ë–î VOID SHOP")
    print("=" * 50)

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_database()

    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    success = migrate_database()

    if success:
        print("\nüéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å backend –±–µ–∑ –æ—à–∏–±–æ–∫.")
    else:
        print("\nüí• –ú–ò–ì–†–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ò–õ–ê–°–¨!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –æ—à–∏–±–æ–∫ –≤—ã—à–µ.")

    print("=" * 50)