# bot_run.py - –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ–∫–æ–≤ –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
import asyncio
import logging
import os
import json
from datetime import datetime
from dotenv import load_dotenv
import aiohttp
from pathlib import Path

load_dotenv()
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
BASE_URL = os.getenv("BASE_URL", "http://localhost:5175")
BACKEND_API = os.getenv("BACKEND_API", "http://localhost:8000")
ADMINS = [s.strip() for s in os.getenv("ADMINS", "").split(",") if s.strip()]

if not BOT_TOKEN:
    raise SystemExit("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile
from aiogram.filters import Command

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()
router = Router()


async def cmd_start(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    webapp_url = BASE_URL.rstrip("/")

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Void Shop",
            web_app=WebAppInfo(url=webapp_url)
        )],
        [InlineKeyboardButton(
            text="üí∞ –ë–∞–ª–∞–Ω—Å",
            callback_data="check_balance"
        )],
        [InlineKeyboardButton(
            text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞",
            url="https://t.me/void_shop_support"
        )]
    ])

    await message.answer(f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Void Shop!</b>

üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!

üõçÔ∏è <b>Void Shop</b> ‚Äî –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Telegram

üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (–±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏)  
‚Ä¢ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º 5-15 –º–∏–Ω—É—Ç

üîí –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ! üëá
""", reply_markup=kb)


async def cmd_balance(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"""
    try:
        user_id = message.from_user.id
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_API}/api/user/{user_id}") as resp:
                if resp.status == 200:
                    user_data = await resp.json()
                    balance = user_data.get('balance', 0)
                    await message.answer(f"""
üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>

üí≥ <b>–ë–∞–ª–∞–Ω—Å:</b> ‚ÇΩ{balance:,.2f}
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}

üí° <i>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ‚Üí –ü—Ä–æ—Ñ–∏–ª—å</i>
""")
                else:
                    await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")


async def callback_check_balance(callback: types.CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å"""
    await callback.message.delete()
    await cmd_balance(callback.message)
    await callback.answer()


# –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ WebApp –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–∞–π–ª–æ–≤
async def handle_webapp_data(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp"""
    if not message.web_app_data:
        return

    try:
        raw_data = message.web_app_data.data
        logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp: {raw_data[:100]}...")

        data = json.loads(raw_data)
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã: type={data.get('type')}")

        if data.get('type') == 'payment_confirmation':
            await handle_payment_confirmation(message, data.get('data', {}))
        elif data.get('type') == 'new_order':
            await handle_new_order(message, data.get('data', {}))
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {data.get('type')}")

    except json.JSONDecodeError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏")


async def handle_payment_confirmation(message: types.Message, payment_data):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–µ–∫–∞"""
    try:
        order_id = payment_data.get('orderId', 'UNKNOWN')
        user_name = payment_data.get('userName', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        username = payment_data.get('username', '')
        amount = float(payment_data.get('amount', 0))
        method = payment_data.get('method', '–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞')
        user_id = int(payment_data.get('userId', message.from_user.id))

        logger.info(f"üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É: {order_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}, —Å—É–º–º–∞: {amount}")

        # –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º —á–µ–∫ –∏–∑ backend
        receipt_path = None
        try:
            async with aiohttp.ClientSession() as session:
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —á–µ–∫—É
                async with session.get(f"{BACKEND_API}/api/balance/requests/{user_id}") as resp:
                    if resp.status == 200:
                        requests = await resp.json()
                        current_request = next(
                            (r for r in requests if r.get('order_id') == order_id),
                            None
                        )
                        if current_request:
                            receipt_path = current_request.get('receipt_path')
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞: {e}")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        admin_message = f"""
üí∞ <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ü–û–ü–û–õ–ù–ï–ù–ò–ï</b>

üìã <b>–ó–∞—è–≤–∫–∞ ‚Ññ:</b> <code>{order_id}</code>
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}
üè∑Ô∏è <b>Username:</b> @{username if username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}  
üÜî <b>Telegram ID:</b> <code>{user_id}</code>
üí≥ <b>–°—É–º–º–∞:</b> ‚ÇΩ{amount:,.2f}
üè¶ <b>–°–ø–æ—Å–æ–±:</b> {method}
üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

‚ö° <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üí≥ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>
‚Ä¢ –ö–∞—Ä—Ç–∞: <code>5536 9141 2345 6789</code>
‚Ä¢ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: VOID SHOP  
‚Ä¢ –ë–∞–Ω–∫: –°–±–µ—Ä –ë–∞–Ω–∫

üîç <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ ‚ÇΩ{amount:,.2f} –Ω–∞ –∫–∞—Ä—Ç—É</b>
üìé <b>–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –Ω–∏–∂–µ</b>
"""

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç–µ–∂",
                callback_data=f"approve_payment_{order_id}_{user_id}_{amount}"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂",
                callback_data=f"reject_payment_{order_id}_{user_id}"
            )],
            [InlineKeyboardButton(
                text="üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                callback_data=f"user_profile_{user_id}"
            )]
        ])

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —Å —á–µ–∫–æ–º
        success_count = 0
        for admin_id in ADMINS:
            try:
                admin_id_int = int(admin_id)

                # –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–µ–∫–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å
                if receipt_path and Path(receipt_path).exists():
                    try:
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                        file_path = Path(receipt_path)
                        if file_path.suffix.lower() in ['.jpg', '.jpeg', '.png', '.webp']:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                            await bot.send_photo(
                                chat_id=admin_id_int,
                                photo=FSInputFile(receipt_path),
                                caption=admin_message,
                                reply_markup=kb
                            )
                        else:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç (PDF –∏ –¥—Ä.)
                            await bot.send_document(
                                chat_id=admin_id_int,
                                document=FSInputFile(receipt_path),
                                caption=admin_message,
                                reply_markup=kb
                            )
                    except Exception as file_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –∞–¥–º–∏–Ω—É {admin_id}: {file_error}")
                        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–∞–π–ª–∞
                        await bot.send_message(
                            admin_id_int,
                            admin_message + "\n\n‚ö†Ô∏è <i>–ß–µ–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å</i>",
                            reply_markup=kb
                        )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —á–µ–∫–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
                    await bot.send_message(
                        admin_id_int,
                        admin_message + "\n\n‚ö†Ô∏è <i>–ß–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</i>",
                        reply_markup=kb
                    )

                success_count += 1
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")

            except ValueError:
                logger.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∞–¥–º–∏–Ω–∞: {admin_id}")
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id}: {e}")

        if success_count == 0:
            logger.error(f"‚ùå –ù–ò –û–î–ù–û–ú–£ –ê–î–ú–ò–ù–£ –ù–ï –û–¢–ü–†–ê–í–õ–ï–ù–û! –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤: {ADMINS}")
            await message.answer(f"""
‚ö†Ô∏è <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞</b>

–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{order_id} —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.

üìû <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:</b> @void_shop_support
üìã <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> <code>{order_id}</code>
üí∞ <b>–°—É–º–º–∞:</b> ‚ÇΩ{amount:,.2f}
""")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(f"""
üìù <b>–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∫ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—é!</b>

üìã <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> <code>{order_id}</code>
üí∞ <b>–°—É–º–º–∞:</b> ‚ÇΩ{amount:,.2f}
üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üí° <b>–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> –æ–±—ã—á–Ω–æ 5-15 –º–∏–Ω—É—Ç
üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
üìé <b>–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º</b>

<i>–£–≤–µ–¥–æ–º–ª–µ–Ω–æ {success_count} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤</i>

üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @void_shop_support
""")

        logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ {order_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–æ {success_count}/{len(ADMINS)} –∞–¥–º–∏–Ω–æ–≤")

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏: {e}")
        await message.answer(f"""
‚ùå <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏</b>

–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏.

üìû <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:</b> @void_shop_support
üîß <b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}
""")


async def handle_new_order(message: types.Message, order_data):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    try:
        order_id = order_data.get('orderId', 'UNKNOWN')
        product_title = order_data.get('productTitle', '–¢–æ–≤–∞—Ä')
        amount = float(order_data.get('amount', 0))
        store_name = order_data.get('storeName', '–ú–∞–≥–∞–∑–∏–Ω')
        buyer_name = order_data.get('buyer', '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å')
        buyer_username = order_data.get('buyerUsername', '')
        buyer_tg_id = order_data.get('buyerTgId', 0)

        admin_message = f"""
üõí <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b>

üìã <b>–ó–∞–∫–∞–∑ ‚Ññ:</b> <code>{order_id}</code>
üì¶ <b>–¢–æ–≤–∞—Ä:</b> {product_title}
üè™ <b>–ú–∞–≥–∞–∑–∏–Ω:</b> {store_name}
üí∞ <b>–°—É–º–º–∞:</b> ‚ÇΩ{amount:,.2f}

üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b>
‚Ä¢ –ò–º—è: {buyer_name}
‚Ä¢ Username: @{buyer_username if buyer_username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}
‚Ä¢ ID: <code>{buyer_tg_id}</code>

üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –û–ø–ª–∞—á–µ–Ω —Å –±–∞–ª–∞–Ω—Å–∞
üí° <b>–î–µ–π—Å—Ç–≤–∏–µ:</b> –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º
"""

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMINS:
            try:
                await bot.send_message(int(admin_id), admin_message)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")


# –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨
async def handle_admin_callback(callback_query: types.CallbackQuery):
    """–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏"""
    data = callback_query.data
    admin_id = callback_query.from_user.id

    if str(admin_id) not in ADMINS:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    try:
        if data.startswith("approve_payment_"):
            await handle_payment_approval(callback_query)
        elif data.startswith("reject_payment_"):
            await handle_payment_rejection(callback_query)
        elif data.startswith("user_profile_"):
            await show_user_profile(callback_query)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ callback: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def handle_payment_approval(callback_query: types.CallbackQuery):
    """–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ–º"""
    parts = callback_query.data.split("_")
    order_id = parts[2]
    user_id = int(parts[3])
    amount = float(parts[4])

    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ backend API
        async with aiohttp.ClientSession() as session:
            process_data = {
                "action": "approve",
                "admin_id": callback_query.from_user.id,
                "admin_comment": f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {callback_query.from_user.first_name}"
            }

            async with session.post(
                    f"{BACKEND_API}/api/balance/process/{order_id}",
                    json=process_data,
                    headers={"Content-Type": "application/json"}
            ) as resp:

                if resp.status == 200:
                    result = await resp.json()
                    new_balance = result.get('new_balance', 0)
                    old_balance = result.get('old_balance', 0)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback_query.message.edit_text(f"""
‚úÖ <b>–ü–õ–ê–¢–ï–ñ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù</b>

üìã <b>–ó–∞—è–≤–∫–∞:</b> <code>{order_id}</code>
üí∞ <b>–°—É–º–º–∞:</b> ‚ÇΩ{amount:,.2f}
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{user_id}</code>
üë®‚Äçüíº <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª:</b> {callback_query.from_user.first_name}
üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

üí≥ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
‚Ä¢ –ë—ã–ª–æ: ‚ÇΩ{old_balance:,.2f}
‚Ä¢ –°—Ç–∞–ª–æ: ‚ÇΩ{new_balance:,.2f}

‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω—ã!</b>
""")

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        await bot.send_message(user_id, f"""
üéâ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>

üìã <b>–ó–∞—è–≤–∫–∞:</b> <code>{order_id}</code>
üí∞ <b>–ó–∞—á–∏—Å–ª–µ–Ω–æ:</b> ‚ÇΩ{amount:,.2f}
üí≥ <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> ‚ÇΩ{new_balance:,.2f}

‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!</b>
üõçÔ∏è –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏

üöÄ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤
""")
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

                    await callback_query.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
                    logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –ø–ª–∞—Ç–µ–∂ {order_id} –Ω–∞ ‚ÇΩ{amount} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                elif resp.status == 409:
                    # –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
                    error_data = await resp.json()
                    await callback_query.answer(
                        f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {error_data.get('current_status', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
                        show_alert=True
                    )
                else:
                    error_data = await resp.json()
                    await callback_query.answer(
                        f"‚ùå –û—à–∏–±–∫–∞: {error_data.get('detail', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                        show_alert=True
                    )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def handle_payment_rejection(callback_query: types.CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    parts = callback_query.data.split("_")
    order_id = parts[2]
    user_id = int(parts[3])

    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ backend API
        async with aiohttp.ClientSession() as session:
            process_data = {
                "action": "reject",
                "admin_id": callback_query.from_user.id,
                "admin_comment": f"–û—Ç–∫–ª–æ–Ω–µ–Ω–æ {callback_query.from_user.first_name}"
            }

            async with session.post(
                    f"{BACKEND_API}/api/balance/process/{order_id}",
                    json=process_data,
                    headers={"Content-Type": "application/json"}
            ) as resp:

                if resp.status == 200:
                    await callback_query.message.edit_text(f"""
‚ùå <b>–ü–õ–ê–¢–ï–ñ –û–¢–ö–õ–û–ù–ï–ù</b>

üìã <b>–ó–∞—è–≤–∫–∞:</b> <code>{order_id}</code>
üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{user_id}</code>
üë®‚Äçüíº <b>–û—Ç–∫–ª–æ–Ω–∏–ª:</b> {callback_query.from_user.first_name}
üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

‚ùå <b>–°—Ç–∞—Ç—É—Å:</b> –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
""")

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        await bot.send_message(user_id, f"""
‚ùå <b>–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

üìã <b>–ó–∞—è–≤–∫–∞:</b> <code>{order_id}</code>

üîç <b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
‚Ä¢ –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞
‚Ä¢ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–µ–∫
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏

üí¨ <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @void_shop_support
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏: <code>{order_id}</code>

üîÑ –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
""")
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

                    await callback_query.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω")

                else:
                    error_data = await resp.json()
                    await callback_query.answer(
                        f"‚ùå –û—à–∏–±–∫–∞: {error_data.get('detail', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                        show_alert=True
                    )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


async def show_user_profile(callback_query: types.CallbackQuery):
    """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = int(callback_query.data.split("_")[2])

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BACKEND_API}/api/user/{user_id}") as resp:
                if resp.status == 200:
                    user_data = await resp.json()

                    await callback_query.message.reply(f"""
üë§ <b>–ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b>

üÜî <b>ID:</b> <code>{user_data.get('tg_id')}</code>
üë§ <b>–ò–º—è:</b> {user_data.get('first_name', '')} {user_data.get('last_name', '')}
üè∑Ô∏è <b>Username:</b> @{user_data.get('username', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {user_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> ‚ÇΩ{user_data.get('balance', 0):,.2f}
üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user_data.get('registered_at', '')[:10]}
‚≠ê <b>–°—Ç–∞—Ç—É—Å:</b> {'–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' if user_data.get('is_verified') else '–û–±—ã—á–Ω—ã–π'}

üîó <b>–°—Å—ã–ª–∫–∞:</b> <a href="tg://user?id={user_id}">–û—Ç–∫—Ä—ã—Ç—å –≤ Telegram</a>
""")
                else:
                    await callback_query.message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
        await callback_query.message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")

    await callback_query.answer()


# –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º webhook - –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ WebApp –¥–∞–Ω–Ω—ã–µ
# Webhook –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–¥—É—Ç —á–µ—Ä–µ–∑ WebApp –¥–∞–Ω–Ω—ã–µ


# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í
router.message.register(cmd_start, Command(commands=["start"]))
router.message.register(cmd_balance, Command(commands=["balance", "bal"]))
router.message.register(handle_webapp_data, F.web_app_data)

router.callback_query.register(callback_check_balance, F.data == "check_balance")
router.callback_query.register(
    handle_admin_callback,
    F.data.startswith(("approve_payment_", "reject_payment_", "user_profile_"))
)

dp.include_router(router)


async def notify_admins_start():
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ"""
    message = f"""
üöÄ <b>Void Shop Bot –∑–∞–ø—É—â–µ–Ω!</b>

üìÖ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}
üåê <b>WebApp:</b> {BASE_URL}
üîß <b>Backend:</b> {BACKEND_API}
üë• <b>–ê–¥–º–∏–Ω—ã:</b> {', '.join(ADMINS)}

‚úÖ <b>–ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ!</b>
üîÑ WebApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã
üìé <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–∞–π–ª–æ–≤ —á–µ–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞</b>
üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @void_shop_support

<i>–í—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å —á–µ–∫–∞–º–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å—é–¥–∞</i>
"""

    success = 0
    for admin_id in ADMINS:
        try:
            await bot.send_message(int(admin_id), message)
            success += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–æ {success}/{len(ADMINS)} –∞–¥–º–∏–Ω–æ–≤")


async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Void Shop Bot...")
    logger.info(f"üìã –ê–¥–º–∏–Ω—ã: {ADMINS}")

    try:
        await notify_admins_start()
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    try:
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ polling...")
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞")
    finally:
        try:
            await bot.session.close()
        except:
            pass
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)